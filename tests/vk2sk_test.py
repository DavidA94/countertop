from unittest import TestCase
from source.logic.vk2sk import Vk2Sk

class TestLinksObject(TestCase):
    def test_keys(self):
        self.assertEqual(Vk2Sk.convert(0x08), "{BKSP}")
        self.assertEqual(Vk2Sk.convert(0x09), "{TAB}")
        self.assertEqual(Vk2Sk.convert(0x0D), "{ENTER}")
        self.assertEqual(Vk2Sk.convert(0x14), "{CAPSLOCK}")
        self.assertEqual(Vk2Sk.convert(0x1B), "{ESC}")
        self.assertEqual(Vk2Sk.convert(0x20), " ")
        self.assertEqual(Vk2Sk.convert(0x21), "{PGUP}")
        self.assertEqual(Vk2Sk.convert(0x22), "{PGDN}")
        self.assertEqual(Vk2Sk.convert(0x23), "{END}")
        self.assertEqual(Vk2Sk.convert(0x24), "{HOME}")
        self.assertEqual(Vk2Sk.convert(0x25), "{LEFT}")
        self.assertEqual(Vk2Sk.convert(0x26), "{UP}")
        self.assertEqual(Vk2Sk.convert(0x27), "{RIGHT}")
        self.assertEqual(Vk2Sk.convert(0x28), "{DOWN}")
        self.assertEqual(Vk2Sk.convert(0x2C), "{PRTSC}")
        self.assertEqual(Vk2Sk.convert(0x2D), "{INSERT}")
        self.assertEqual(Vk2Sk.convert(0x2E), "{DELETE}")
        self.assertEqual(Vk2Sk.convert(0x2F), "{HELP}")
        self.assertEqual(Vk2Sk.convert(0x30), "0")
        self.assertEqual(Vk2Sk.convert(0x31), "1")
        self.assertEqual(Vk2Sk.convert(0x32), "2")
        self.assertEqual(Vk2Sk.convert(0x33), "3")
        self.assertEqual(Vk2Sk.convert(0x34), "4")
        self.assertEqual(Vk2Sk.convert(0x35), "5")
        self.assertEqual(Vk2Sk.convert(0x36), "6")
        self.assertEqual(Vk2Sk.convert(0x37), "7")
        self.assertEqual(Vk2Sk.convert(0x38), "8")
        self.assertEqual(Vk2Sk.convert(0x39), "9")
        self.assertEqual(Vk2Sk.convert(0x41), "A")
        self.assertEqual(Vk2Sk.convert(0x42), "B")
        self.assertEqual(Vk2Sk.convert(0x43), "C")
        self.assertEqual(Vk2Sk.convert(0x44), "D")
        self.assertEqual(Vk2Sk.convert(0x45), "E")
        self.assertEqual(Vk2Sk.convert(0x46), "F")
        self.assertEqual(Vk2Sk.convert(0x47), "G")
        self.assertEqual(Vk2Sk.convert(0x48), "H")
        self.assertEqual(Vk2Sk.convert(0x49), "I")
        self.assertEqual(Vk2Sk.convert(0x4A), "J")
        self.assertEqual(Vk2Sk.convert(0x4B), "K")
        self.assertEqual(Vk2Sk.convert(0x4C), "L")
        self.assertEqual(Vk2Sk.convert(0x4D), "M")
        self.assertEqual(Vk2Sk.convert(0x4E), "N")
        self.assertEqual(Vk2Sk.convert(0x4F), "O")
        self.assertEqual(Vk2Sk.convert(0x50), "P")
        self.assertEqual(Vk2Sk.convert(0x51), "Q")
        self.assertEqual(Vk2Sk.convert(0x52), "R")
        self.assertEqual(Vk2Sk.convert(0x53), "S")
        self.assertEqual(Vk2Sk.convert(0x54), "T")
        self.assertEqual(Vk2Sk.convert(0x55), "U")
        self.assertEqual(Vk2Sk.convert(0x56), "V")
        self.assertEqual(Vk2Sk.convert(0x57), "W")
        self.assertEqual(Vk2Sk.convert(0x58), "X")
        self.assertEqual(Vk2Sk.convert(0x59), "Y")
        self.assertEqual(Vk2Sk.convert(0x5A), "Z")
        self.assertEqual(Vk2Sk.convert(0x60), "0")
        self.assertEqual(Vk2Sk.convert(0x61), "1")
        self.assertEqual(Vk2Sk.convert(0x62), "2")
        self.assertEqual(Vk2Sk.convert(0x63), "3")
        self.assertEqual(Vk2Sk.convert(0x64), "4")
        self.assertEqual(Vk2Sk.convert(0x65), "5")
        self.assertEqual(Vk2Sk.convert(0x66), "6")
        self.assertEqual(Vk2Sk.convert(0x67), "7")
        self.assertEqual(Vk2Sk.convert(0x68), "8")
        self.assertEqual(Vk2Sk.convert(0x69), "9")
        self.assertEqual(Vk2Sk.convert(0x6A), "{MULTIPLY}")
        self.assertEqual(Vk2Sk.convert(0x6B), "{ADD}")
        self.assertEqual(Vk2Sk.convert(0x6D), "{SUBTRACT}")
        self.assertEqual(Vk2Sk.convert(0x6E), ".")
        self.assertEqual(Vk2Sk.convert(0x6F), "{DIVIDE}")
        self.assertEqual(Vk2Sk.convert(0x70), "{F1}")
        self.assertEqual(Vk2Sk.convert(0x71), "{F2}")
        self.assertEqual(Vk2Sk.convert(0x72), "{F3}")
        self.assertEqual(Vk2Sk.convert(0x73), "{F4}")
        self.assertEqual(Vk2Sk.convert(0x74), "{F5}")
        self.assertEqual(Vk2Sk.convert(0x75), "{F6}")
        self.assertEqual(Vk2Sk.convert(0x76), "{F7}")
        self.assertEqual(Vk2Sk.convert(0x77), "{F8}")
        self.assertEqual(Vk2Sk.convert(0x78), "{F9}")
        self.assertEqual(Vk2Sk.convert(0x79), "{F10}")
        self.assertEqual(Vk2Sk.convert(0x7A), "{F11}")
        self.assertEqual(Vk2Sk.convert(0x7B), "{F12}")
        self.assertEqual(Vk2Sk.convert(0x7C), "{F13}")
        self.assertEqual(Vk2Sk.convert(0x7D), "{F14}")
        self.assertEqual(Vk2Sk.convert(0x7E), "{F15}")
        self.assertEqual(Vk2Sk.convert(0x7F), "{F16}")
        self.assertEqual(Vk2Sk.convert(0x80), "{F17}")
        self.assertEqual(Vk2Sk.convert(0x81), "{F18}")
        self.assertEqual(Vk2Sk.convert(0x82), "{F19}")
        self.assertEqual(Vk2Sk.convert(0x83), "{F20}")
        self.assertEqual(Vk2Sk.convert(0x84), "{F21}")
        self.assertEqual(Vk2Sk.convert(0x85), "{F22}")
        self.assertEqual(Vk2Sk.convert(0x86), "{F23}")
        self.assertEqual(Vk2Sk.convert(0x87), "{F24}")
        self.assertEqual(Vk2Sk.convert(0x90), "{NUMLOCK}")
        self.assertEqual(Vk2Sk.convert(0x91), "{SCROLLLOCK}")

    def test_key_combos(self):
        self.assertEqual(Vk2Sk.convert(0x74, ctrl=True), "^{F5}")
        self.assertEqual(Vk2Sk.convert(0x41, True, True, True), "%^+A")
        self.assertEqual(Vk2Sk.convert(0x42, False, True, True), "^+B")

    def test_fail(self):
        self.assertEqual(Vk2Sk.convert(0x00, True), None)

    def test_shift_secondary_no_others(self):
        self.assertEqual(Vk2Sk.convert(0x31, shift=True), "!")

    def test_shift_alt_secondary(self):
        self.assertEqual(Vk2Sk.convert(0x30, False, True, True), "^+0")